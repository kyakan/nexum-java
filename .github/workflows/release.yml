name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Update pom.xml version
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.VERSION }}
        mvn versions:commit
    
    - name: Build and package
      run: mvn -B clean package
    
    - name: Run tests
      run: mvn -B test
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREV_TAG" ]; then
          # First release - get all commits
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          # Get commits since previous tag
          CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Save changelog to file
        echo "$CHANGELOG" > CHANGELOG.txt
        
        # Also save to output (escape newlines)
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release v${{ steps.version.outputs.VERSION }}
        body: |
          ## üöÄ Release v${{ steps.version.outputs.VERSION }}
          
          ### üì¶ Artifacts
          - `state-machine-${{ steps.version.outputs.VERSION }}.jar` - Main library JAR
          
          ### üìù Changelog
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ### üì• Installation
          
          **Maven:**
          ```xml
          <dependency>
              <groupId>it.disionira</groupId>
              <artifactId>state-machine</artifactId>
              <version>${{ steps.version.outputs.VERSION }}</version>
          </dependency>
          ```
          
          **Manual:**
          Download the JAR file from the assets below and add it to your project's classpath.
        files: |
          target/state-machine-${{ steps.version.outputs.VERSION }}.jar
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}