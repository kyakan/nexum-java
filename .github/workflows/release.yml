name: Release

on:
  push:
    tags:
      - 'v*' # Trigger su tag che iniziano con v (es. v1.0.0)

env:
  JAVA_VERSION: '11'
  MAVEN_OPTS: "-Xmx1024m"

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B clean package

      - name: Get tag version
        id: get_version
        run: |
          # Estrae la versione dal tag (rimuove il prefisso 'v')
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          configuration: |
            {
              "categories": [
                {
                  "title": "🚀 Features",
                  "labels": ["feature", "enhancement"]
                },
                {
                  "title": "🐛 Bug Fixes",
                  "labels": ["bug", "fix"]
                },
                {
                  "title": "🧰 Maintenance",
                  "labels": ["chore", "dependencies", "refactor"]
                },
                {
                  "title": "📝 Documentation",
                  "labels": ["documentation"]
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## StateMachine ${{ steps.get_version.outputs.version }}

            ${{ steps.changelog.outputs.changelog }}

            ### Artefatti
            - JAR principale: `state-machine-${{ steps.get_version.outputs.version }}.jar`
            - Javadoc: `state-machine-${{ steps.get_version.outputs.version }}-javadoc.jar`
            - Sources: `state-machine-${{ steps.get_version.outputs.version }}-sources.jar`

            ### Istruzioni
            ```xml
            <dependency>
                <groupId>it.disionira</groupId>
                <artifactId>state-machine</artifactId>
                <version>${{ steps.get_version.outputs.version }}</version>
            </dependency>
            ```

            ### Note
            - Compatibile con Java 11+
            - Nessuna dipendenza esterna
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
          generate_release_notes: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/state-machine-${{ steps.get_version.outputs.version }}.jar
          asset_name: state-machine-${{ steps.get_version.outputs.version }}.jar
          asset_content_type: application/java-archive

      - name: Generate and Upload Javadoc
        run: |
          mvn javadoc:jar
          mv target/state-machine-${{ steps.get_version.outputs.version }}-javadoc.jar target/state-machine-${{ steps.get_version.outputs.version }}-javadoc.jar.tmp
          zip -r target/state-machine-${{ steps.get_version.outputs.version }}-javadoc.jar target/apidocs

      - name: Upload Javadoc Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/state-machine-${{ steps.get_version.outputs.version }}-javadoc.jar
          asset_name: state-machine-${{ steps.get_version.outputs.version }}-javadoc.jar
          asset_content_type: application/zip

      - name: Generate and Upload Sources
        run: mvn source:jar

      - name: Upload Sources Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/state-machine-${{ steps.get_version.outputs.version }}-sources.jar
          asset_name: state-machine-${{ steps.get_version.outputs.version }}-sources.jar
          asset_content_type: application/java-archive

      - name: Publish to GitHub Packages
        run: mvn deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}